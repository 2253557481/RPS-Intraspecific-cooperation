///RPS
#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <cstdlib>
#include <ctime>
#include <iomanip>

using namespace std;


#define L 120
#define n L*L
double alpha=1,beta=1;

int strategy[n],neighbors[n][8];
double p,m,R = p + m;//p种间竞争，m移动 
double p01,p02,p03,q1,q2,q3,p11,p22,p33,R1,R2,R3,p1,p2,p3;
int z1,z2,z3,z4,a,qq,rr;
int iseed[4]={17, 29, 43, 55};

ofstream outfile1;
ofstream outfile2;
/*************************** RNG procedures ****************************************/
#define NN 624
#define MM 397
#define MATRIX_A 0x9908b0df   /* constant vector a */
#define UPPER_MASK 0x80000000 /* most significant w-r bits */
#define LOWER_MASK 0x7fffffff /* least significant r bits */
#define TEMPERING_MASK_B 0x9d2c5680
#define TEMPERING_MASK_C 0xefc60000
#define TEMPERING_SHIFT_U(y)  (y >> 11)
#define TEMPERING_SHIFT_S(y)  (y << 7)
#define TEMPERING_SHIFT_T(y)  (y << 15)
#define TEMPERING_SHIFT_L(y)  (y >> 18)

static unsigned long mt[NN]; /* the array for the state vector  */
static int mti=NN+1; /* mti==NN+1 means mt[NN] is not initialized */
void sgenrand(unsigned long seed)
{int i;
 for (i=0;i<NN;i++) {mt[i] = seed & 0xffff0000; seed = 69069 * seed + 1;
                     mt[i] |= (seed & 0xffff0000) >> 16; seed = 69069 * seed + 1;
  }
  mti = NN;
}
void lsgenrand(unsigned long seed_array[])
{ int i; for (i=0;i<NN;i++) mt[i] = seed_array[i]; mti=NN; };
double genrand()
{
    unsigned long y;
    static unsigned long mag01[2]={0x0, MATRIX_A};
    if (mti >= NN)
    {
        int kk;
        if (mti == NN+1) sgenrand(4357);
        for (kk=0;kk<NN-MM;kk++) {
            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
            mt[kk] = mt[kk+MM] ^ (y >> 1) ^ mag01[y & 0x1];
        }
        for (;kk<NN-1;kk++) {
            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
            mt[kk] = mt[kk+(MM-NN)] ^ (y >> 1) ^ mag01[y & 0x1];
        }
        y = (mt[NN-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
        mt[NN-1] = mt[MM-1] ^ (y >> 1) ^ mag01[y & 0x1];
        mti = 0;
    }
    y = mt[mti++]; y ^= TEMPERING_SHIFT_U(y); y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C; y ^= TEMPERING_SHIFT_L(y);
    return y;
}

double randf(){ return ( (double)genrand() * 2.3283064370807974e-10 ); }
long randi(unsigned long LIM){ return((unsigned long)genrand() % LIM); }

/********************** END of RNG ************************************/
///初始的随机分布 
void initial()
{
	double suiji;
	for(int i = 0; i < n; i ++)
	{
		suiji = randi(3);
		if(suiji == 0)strategy[i] = 1;
		else if(suiji == 1)strategy[i] = 2;
		else strategy[i] = 3;
	}
}

// 产生网络 8邻居 
void gen_neighbor0()
{
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<8; j++)
		{
			if(j == 0)//左边的邻居
			{
				if(i%L == 0) neighbors[i][j] = i+L-1; 
				else neighbors[i][j] = i-1;
			}
			
			else if(j == 4)//左上角的邻居 
			{
				if(i == 0 ) neighbors[i][j] = L*L-1;
				else if(i%L == 0) neighbors[i][j] = i-1;
				else if(i<L) neighbors[i][j] =i + L * (L-1)-1;
				else neighbors[i][j] = i-L-1;
			} 
			
			else if(j == 1)//上边的邻居 
			{
				if(i < L) neighbors[i][j] = i+(L-1)*L;
				else neighbors[i][j] = i-L;
			} 
			 
			else if(j == 5)//右上角的邻居 
			{
				if(i == L-1) neighbors[i][j] =L*(L-1);
				else if((i+1)%L == 0) neighbors[i][j] = i-2*L+1;
				else if(i<L) neighbors[i][j] = i + L*(L-1)+1;
				else neighbors[i][j] = i-L+1;
			}  
			                                                
			else if(j == 2)//右边的邻居
			{
				if((i+1)%L == 0) neighbors[i][j] = i-L+1; 
				else neighbors[i][j] =i+1;
			}
			
			else if(j == 6)//右下角的邻居
			{
				if(i == L*L-1) neighbors[i][j] = 0;
				else if((i+1)%L == 0) neighbors[i][j] = i + 1; 
				else if(i >= L*(L-1)) neighbors[i][j] = i-L*(L-1) + 1; 
				else neighbors[i][j] = i+L+1;
			}
		
			else if(j == 3)//下面的邻居 
			{
				if(i >= L*(L-1)) neighbors[i][j] = i-L*(L-1);
				else neighbors[i][j] = i+L;
			}
			
			else //左下角的邻居
			{
				if(i == L*(L-1)) neighbors[i][j] = L-1;
				else if(i%L == 0) neighbors[i][j] = i+2*L-1;
				else if(i >= L*(L-1)) neighbors[i][j] = i - L*(L-1)-1; 
				else neighbors[i][j] = i+L-1;
			}
			
		}	
	}
		
}

////统计邻居中A个体数量 
double count_A(int x)
{
	int A=0;
	for(int i=0;i<8;i++)
	{
		int y=neighbors[x][i];
        if(strategy[y]==1)
		{
        	A++;
		}
		
	}
	return A;
} 


////统计邻居中B个体数量 
double count_B(int x)
{
	int B=0;
	for(int i=0;i<8;i++)
	{
		int y=neighbors[x][i];
        if(strategy[y]==2)
		{
        	B++;
		}
		
	}
	return B;
} 


////统计邻居中C个体数量 
double count_C(int x)
{
	int C=0;
	for(int i=0;i<8;i++)
	{
		int y=neighbors[x][i];
        if(strategy[y]==3)
		{
        	C++;
		}
		
	}
	return C;
} 

//// RPS
void game()
{
	for(int i = 0; i < n; i ++)
	{
		double suiji = randf();
		int y;
	    int x = randi(n);
        int N1 =  count_A(x);
        int N2 =  count_B(x);
        int N3 =  count_C(x);
		y = neighbors[x][randi(4)];
        p01 = 1+alpha*N1/8;
		p02 = 1+alpha*N2/8;
		p03 = 1+alpha*N3/8;
        q1 = 1+beta*N1/8;
		q2 = 1+beta*N2/8;
		q3 = 1+beta*N3/8;
        p11 = (double)(p*p01/q2); 
		p22 = (double)(p*p02/q3); 
		p33 = (double)(p*p03/q1);
        R1 = p11 + m; 
		R2 = p22 + m; 
		R3 = p33 + m;
		p1 = (double)p11/R1; 
		p2 = (double)p22/R2; 
		p3 = (double)p33/R3;
						
	    if(strategy[x]==1)	
		{
	   
		    if(suiji <p1 )//种间竞争 
		   {     
		   	int unit1 = strategy[x], unit2 = strategy[y], unit3=unit2-unit1;
    		if (unit3 == 1)strategy[y] = unit1;
			else {i--;continue;}  
		   }

		    else //交换 
		   {
			strategy[x] = strategy[x] + strategy[y];
			strategy[y] = strategy[x] - strategy[y];
            strategy[x] = strategy[x] - strategy[y];
		   }
		  
	    }
		
		else if(strategy[x]==2)	
		{
			
		   if(suiji <p2 )//种间竞争 
		   {     
		   	int unit1 = strategy[x], unit2 = strategy[y], unit3=unit2-unit1;
    		if (unit3 == 1)strategy[y] = unit1;
			else {i--;continue;}   
		   }
	     	
		    else//交换 
		   {
			strategy[x] = strategy[x] + strategy[y];
			strategy[y] = strategy[x] - strategy[y];
            strategy[x] = strategy[x] - strategy[y];
		   }
	    }
	    
	    else 
		{
			
		   if(suiji <p3 )//种间竞争 
		   {     
		   	int unit1 = strategy[x], unit2 = strategy[y], unit3=unit2-unit1;
    		if (unit3 == -2)strategy[y] = unit1;
			else {i--;continue;} 
		   }
		    	     	
		    else//交换 
		   {
			strategy[x] = strategy[x] + strategy[y];
			strategy[y] = strategy[x] - strategy[y];
            strategy[x] = strategy[x] - strategy[y];
		   }
	    }
	} 
		
}

int main()
{
	int round = 800, k[3] = {0, 0, 0}, j=0;
	double ext = 0;
	gen_neighbor0();        //鐢熸垚鏍煎瓙缃戠粶
	srand((unsigned)time(0));
	
	outfile1.open("Pext.txt");
    if(!outfile1)
	{
	 cout<<"can not open";
	 abort();
	}

    	for(double m = 0.05; m<1; m=m+0.05)
		{
			
				ext = 0;
				p =  1-m ;
				for(int i = 0; i < round; i ++)
				{
					initial();
					k[0]=0;
					k[1]=0;
					k[2]=0; 

					// monte
					for(j = 0; j < 10000; j ++)
					{
					    game();
						if(j % 1 == 0)
						{
							k[0]=0;
							k[1]=0;
							k[2]=0;
							for(int x = 0; x < n; x ++)
							{
								if(strategy[x]==3)k[2]=1; 
								else if(strategy[x]==1)k[0]=1;
								else if(strategy[x]==2)k[1]=1;
								if(k[0]+k[1]+k[2]>2)break;	
							}
							if(k[0]+k[1]+k[2]<=2)	
							{
							ext++;
							break;
							}			
				        }
						  
					}	

				   cout<<'\t'<<i<<'\t'<<j<<'\t'<<ext<<'\t'<<(ext/(i+1))<<'\t'<<m<<'\t'<<endl;
			    }
			ext = ext/round;
			cout<<"xxxxxxxxxxxxxxxxxxxx"<<'\t'<<ext<<'\t'<<m<<'\t'<<"xxxxxxxxxxxxxxxxxxxx"<<endl;
			outfile1<<'\t'<<m<<'\t'<<ext<<'\t'<<endl;
	        
	    }				
	outfile1.close();
    
	return 0;
}


